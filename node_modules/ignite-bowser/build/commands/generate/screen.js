"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var patterns_1 = require("../../lib/patterns");
exports.description = "Generates a React Native screen.";
exports.run = function (toolbox) {
    return __awaiter(this, void 0, void 0, function () {
        var parameters, print, strings, ignite, filesystem, patching, pascalCase, isBlank, camelCase, config, name, screenName, pascalName, camelName, props, jobs, barrelExportPath, exportToAdd, msg, appNavFilePath, importToAdd, routeToAdd, msg;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    parameters = toolbox.parameters, print = toolbox.print, strings = toolbox.strings, ignite = toolbox.ignite, filesystem = toolbox.filesystem, patching = toolbox.patching;
                    pascalCase = strings.pascalCase, isBlank = strings.isBlank, camelCase = strings.camelCase;
                    config = ignite.loadIgniteConfig();
                    // validation
                    if (isBlank(parameters.first)) {
                        print.info("A name is required.");
                        print.info("ignite generate screen <name>\n");
                        return [2 /*return*/];
                    }
                    name = parameters.first;
                    screenName = name.endsWith("-screen") ? name : name + "-screen";
                    // prettier-ignore
                    if (name.endsWith('-screen')) {
                        print.info("Note: For future reference, the `-screen` suffix is automatically added for you.");
                        print.info("You're welcome to add it manually, but we wanted you to know you don't have to. :)");
                    }
                    pascalName = pascalCase(screenName);
                    camelName = camelCase(screenName);
                    props = { name: screenName, pascalName: pascalName, camelName: camelName };
                    jobs = [
                        {
                            template: "screen.ejs",
                            target: "app/screens/" + screenName + ".tsx",
                        },
                    ];
                    // make the templates
                    return [4 /*yield*/, ignite.copyBatch(toolbox, jobs, props)
                        // patch the barrel export file
                    ];
                case 1:
                    // make the templates
                    _a.sent();
                    barrelExportPath = process.cwd() + "/app/screens/index.ts";
                    exportToAdd = "export * from \"./" + screenName + "\"\n";
                    if (!filesystem.exists(barrelExportPath)) {
                        msg = "No '" + barrelExportPath + "' file found. Can't export screen." +
                            "Export your new screen manually.";
                        print.warning(msg);
                        process.exit(1);
                    }
                    return [4 /*yield*/, patching.append(barrelExportPath, exportToAdd)
                        // if using `react-navigation` go the extra step
                        // and insert the screen into the nav router
                    ];
                case 2:
                    _a.sent();
                    if (!(config.navigation === "react-navigation")) return [3 /*break*/, 5];
                    appNavFilePath = process.cwd() + "/app/navigation/root-navigator.ts";
                    importToAdd = "  " + pascalName + ",\n";
                    routeToAdd = "\n    " + camelName + ": { screen: " + pascalName + " },";
                    if (!filesystem.exists(appNavFilePath)) {
                        msg = "No '" + appNavFilePath + "' file found.  Can't insert screen." +
                            "Add your new screen manually to your navigation.";
                        print.error(msg);
                        process.exit(1);
                    }
                    // insert screen import
                    return [4 /*yield*/, patching.patch(appNavFilePath, {
                            before: new RegExp(patterns_1.Patterns.NAV_IMPORTS_SCREENS),
                            insert: importToAdd,
                        })
                        // insert screen route
                    ];
                case 3:
                    // insert screen import
                    _a.sent();
                    // insert screen route
                    return [4 /*yield*/, patching.patch(appNavFilePath, {
                            after: new RegExp(patterns_1.Patterns.ROOT_NAV_ROUTES),
                            insert: routeToAdd,
                        })];
                case 4:
                    // insert screen route
                    _a.sent();
                    return [3 /*break*/, 6];
                case 5:
                    print.info("Screen " + screenName + " created, manually add it to your navigation");
                    _a.label = 6;
                case 6: return [2 /*return*/];
            }
        });
    });
};
//# sourceMappingURL=screen.js.map