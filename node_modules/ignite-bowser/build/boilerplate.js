"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ramda_1 = require("ramda");
var react_native_version_1 = require("./lib/react-native-version");
// We need this value here, as well as in our package.json.ejs template
var REACT_NATIVE_GESTURE_HANDLER_VERSION = "^1.5.0";
/**
 * Is Android installed?
 *
 * $ANDROID_HOME/tools folder has to exist.
 */
exports.isAndroidInstalled = function (toolbox) {
    var androidHome = process.env.ANDROID_HOME;
    var hasAndroidEnv = !toolbox.strings.isBlank(androidHome);
    var hasAndroid = hasAndroidEnv && toolbox.filesystem.exists(androidHome + "/tools") === "dir";
    return Boolean(hasAndroid);
};
/**
 * Let's install.
 */
exports.install = function (toolbox) { return __awaiter(void 0, void 0, void 0, function () {
    /**
     * Merge the package.json from our template into the one provided from react-native init.
     */
    function mergePackageJsons() {
        return __awaiter(this, void 0, void 0, function () {
            var rawJson, newPackageJson, currentPackage, newPackage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // transform our package.json so we can replace variables
                        ignite.log("merging Bowser package.json with React Native package.json");
                        return [4 /*yield*/, template.generate({
                                directory: ignite.ignitePluginPath() + "/boilerplate",
                                template: "package.json.ejs",
                                props: __assign(__assign({}, templateProps), { kebabName: strings.kebabCase(templateProps.name) }),
                            })];
                    case 1:
                        rawJson = _a.sent();
                        newPackageJson = JSON.parse(rawJson);
                        currentPackage = filesystem.read("package.json", "json");
                        newPackage = ramda_1.pipe(ramda_1.assoc("dependencies", ramda_1.merge(currentPackage.dependencies, newPackageJson.dependencies)), ramda_1.assoc("devDependencies", ramda_1.merge(ramda_1.omit(["@react-native-community/eslint-config"], currentPackage.devDependencies), newPackageJson.devDependencies)), ramda_1.assoc("scripts", ramda_1.merge(currentPackage.scripts, newPackageJson.scripts)), ramda_1.merge(ramda_1.__, ramda_1.omit(["dependencies", "devDependencies", "scripts"], newPackageJson)))(currentPackage);
                        // write this out
                        ignite.log("writing newly merged package.json");
                        filesystem.write("package.json", newPackage, { jsonIndent: 2 });
                        return [2 /*return*/];
                }
            });
        });
    }
    var filesystem, parameters, ignite, reactNative, print, system, template, prompt, patching, strings, colors, red, yellow, bold, gray, cyan, isWindows, isMac, perfStart, name, spinner, includeDetox, askAboutDetox, _a, rnInstall, filesToRemove, boilerplatePath, copyOpts, templates, templateProps, debugFlag, boilerplate, e_1, installDeps, perfDuration, androidInfo, successMessage;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                filesystem = toolbox.filesystem, parameters = toolbox.parameters, ignite = toolbox.ignite, reactNative = toolbox.reactNative, print = toolbox.print, system = toolbox.system, template = toolbox.template, prompt = toolbox.prompt, patching = toolbox.patching, strings = toolbox.strings;
                colors = print.colors;
                red = colors.red, yellow = colors.yellow, bold = colors.bold, gray = colors.gray, cyan = colors.cyan;
                isWindows = process.platform === "win32";
                isMac = process.platform === "darwin";
                if (parameters.options["dry-run"])
                    return [2 /*return*/];
                perfStart = new Date().getTime();
                name = parameters.first;
                spinner = print
                    .spin("using the " + red("Infinite Red") + " boilerplate v3 (code name 'Bowser')")
                    .succeed();
                includeDetox = false;
                if (!isMac) return [3 /*break*/, 4];
                askAboutDetox = parameters.options.detox === undefined;
                if (!askAboutDetox) return [3 /*break*/, 2];
                return [4 /*yield*/, prompt.confirm("Would you like to include Detox end-to-end tests?")];
            case 1:
                _a = _b.sent();
                return [3 /*break*/, 3];
            case 2:
                _a = parameters.options.detox === true;
                _b.label = 3;
            case 3:
                includeDetox = _a;
                if (includeDetox) {
                    // prettier-ignore
                    print.info("\n          You'll love Detox for testing your app! There are some additional requirements to\n          install, so make sure to check out " + cyan('e2e/README.md') + " in your generated app!\n        ");
                }
                return [3 /*break*/, 5];
            case 4:
                if (parameters.options.detox === true) {
                    // prettier-ignore
                    if (isWindows) {
                        print.info("Skipping Detox because it is only supported on macOS, but you're running Windows");
                    }
                    else {
                        print.info("Skipping Detox because it is only supported on macOS");
                    }
                }
                _b.label = 5;
            case 5: return [4 /*yield*/, reactNative.install({
                    name: name,
                    version: react_native_version_1.getReactNativeVersion(toolbox),
                    useNpm: !ignite.useYarn,
                })];
            case 6:
                rnInstall = _b.sent();
                if (rnInstall.exitCode > 0)
                    process.exit(rnInstall.exitCode);
                filesToRemove = [
                    ".babelrc",
                    "babel.config.js",
                    ".buckconfig",
                    ".eslintrc.js",
                    ".prettierrc.js",
                    ".flowconfig",
                    "App.js",
                    "__tests__",
                ];
                filesToRemove.map(filesystem.remove);
                // copy our App, Tests & storybook directories
                spinner.text = "▸ copying files";
                spinner.start();
                boilerplatePath = __dirname + "/../boilerplate";
                copyOpts = { overwrite: true, matching: "!*.ejs" };
                filesystem.copy(boilerplatePath + "/app", process.cwd() + "/app", copyOpts);
                filesystem.copy(boilerplatePath + "/test", process.cwd() + "/test", copyOpts);
                filesystem.copy(boilerplatePath + "/storybook", process.cwd() + "/storybook", copyOpts);
                filesystem.copy(boilerplatePath + "/bin", process.cwd() + "/bin", copyOpts);
                includeDetox && filesystem.copy(boilerplatePath + "/e2e", process.cwd() + "/e2e", copyOpts);
                spinner.stop();
                // generate some templates
                spinner.text = "▸ generating files";
                templates = [
                    { template: "index.js.ejs", target: "index.js" },
                    { template: "README.md", target: "README.md" },
                    { template: ".gitignore.ejs", target: ".gitignore" },
                    { template: ".env.example", target: ".env" },
                    { template: ".prettierignore", target: ".prettierignore" },
                    { template: ".solidarity", target: ".solidarity" },
                    { template: "babel.config.js", target: "babel.config.js" },
                    { template: "react-native.config.js", target: "react-native.config.js" },
                    { template: "tsconfig.json", target: "tsconfig.json" },
                    { template: "app/app.tsx.ejs", target: "app/app.tsx" },
                    {
                        template: "app/screens/welcome-screen/welcome-screen.tsx.ejs",
                        target: "app/screens/welcome-screen/welcome-screen.tsx",
                    },
                    {
                        template: "app/screens/demo-screen/demo-screen.tsx.ejs",
                        target: "app/screens/demo-screen/demo-screen.tsx",
                    },
                    { template: "bin/postInstall", target: "bin/postInstall" },
                ];
                templateProps = {
                    name: name,
                    igniteVersion: ignite.version,
                    reactNativeVersion: rnInstall.version,
                    reactNativeGestureHandlerVersion: REACT_NATIVE_GESTURE_HANDLER_VERSION,
                    vectorIcons: false,
                    animatable: false,
                    i18n: false,
                    includeDetox: includeDetox,
                };
                return [4 /*yield*/, ignite.copyBatch(toolbox, templates, templateProps, {
                        quiet: true,
                        directory: ignite.ignitePluginPath() + "/boilerplate",
                    })];
            case 7:
                _b.sent();
                return [4 /*yield*/, ignite.setIgniteConfig("navigation", "react-navigation")
                    /**
                     * Because of https://github.com/react-native-community/cli/issues/462,
                     * we can't detox-test the release configuration. Turn on dead-code stripping
                     * to fix this.
                     */
                ];
            case 8:
                _b.sent();
                if (!includeDetox) return [3 /*break*/, 10];
                return [4 /*yield*/, ignite.patchInFile("ios/" + name + ".xcodeproj/xcshareddata/xcschemes/" + name + ".xcscheme", {
                        replace: 'buildForRunning = "YES"\n            buildForProfiling = "NO"',
                        insert: 'buildForRunning = "NO"\n            buildForProfiling = "NO"',
                    })];
            case 9:
                _b.sent();
                _b.label = 10;
            case 10:
                /**
                 * Append to files
                 */
                // https://github.com/facebook/react-native/issues/12724
                filesystem.appendAsync(".gitattributes", "*.bat text eol=crlf");
                return [4 /*yield*/, mergePackageJsons()];
            case 11:
                _b.sent();
                spinner.stop();
                debugFlag = parameters.options.debug ? "--debug" : "";
                _b.label = 12;
            case 12:
                _b.trys.push([12, 15, , 16]);
                // boilerplate adds itself to get plugin.js/generators etc
                // Could be directory, npm@version, or just npm name.  Default to passed in values
                ignite.log("adding boilerplate to project for generator commands");
                boilerplate = parameters.options.b || parameters.options.boilerplate || "ignite-bowser";
                return [4 /*yield*/, system.spawn("ignite add " + boilerplate + " " + debugFlag, { stdio: "inherit" })];
            case 13:
                _b.sent();
                ignite.log("adding react-native-gesture-handler");
                return [4 /*yield*/, ignite.addModule("react-native-gesture-handler", {
                        version: REACT_NATIVE_GESTURE_HANDLER_VERSION,
                    })];
            case 14:
                _b.sent();
                ignite.log("patching MainActivity.java to add RNGestureHandler");
                ignite.patchInFile(process.cwd() + "/android/app/src/main/java/com/" + name.toLowerCase() + "/MainActivity.java", {
                    after: "import com.facebook.react.ReactActivity;",
                    insert: "\n      import com.facebook.react.ReactActivityDelegate;\n      import com.facebook.react.ReactRootView;\n      import com.swmansion.gesturehandler.react.RNGestureHandlerEnabledRootView;",
                });
                ignite.patchInFile(process.cwd() + "/android/app/src/main/java/com/" + name.toLowerCase() + "/MainActivity.java", {
                    after: "public class MainActivity extends ReactActivity {",
                    insert: "\n  @Override\n" +
                        "  protected ReactActivityDelegate createReactActivityDelegate() {\n" +
                        "    return new ReactActivityDelegate(this, getMainComponentName()) {\n" +
                        "      @Override\n" +
                        "      protected ReactRootView createRootView() {\n" +
                        "       return new RNGestureHandlerEnabledRootView(MainActivity.this);\n" +
                        "      }\n" +
                        "    };\n" +
                        "  }",
                });
                ignite.log("patching package.json to add solidarity postInstall");
                ignite.patchInFile(process.cwd() + "/package.json", {
                    replace: "\"postinstall\": \"solidarity\",",
                    insert: "\"postinstall\": \"node ./bin/postInstall\",",
                });
                return [3 /*break*/, 16];
            case 15:
                e_1 = _b.sent();
                ignite.log(e_1);
                print.error("\n      There were errors while generating the project. Run with --debug to see verbose output.\n    ");
                throw e_1;
            case 16:
                installDeps = ignite.useYarn ? "yarn" : "npm install";
                return [4 /*yield*/, system.run(installDeps)];
            case 17:
                _b.sent();
                spinner.succeed("Installed dependencies");
                // run react-native link to link assets
                return [4 /*yield*/, system.spawn("react-native link", { stdio: "ignore" })];
            case 18:
                // run react-native link to link assets
                _b.sent();
                spinner.succeed("Linked assets");
                if (!isWindows) return [3 /*break*/, 20];
                ignite.log("patching Android settings.gradle file for running on Windows");
                return [4 /*yield*/, patching.update(process.cwd() + "/android/settings.gradle", function (contents) {
                        return contents.split("\\").join("/");
                    })];
            case 19:
                _b.sent();
                _b.label = 20;
            case 20:
                // let eslint and prettier clean things up
                ignite.log("linting");
                return [4 /*yield*/, system.spawn((ignite.useYarn ? "yarn" : "npm run") + " lint")];
            case 21:
                _b.sent();
                ignite.log("formatting");
                return [4 /*yield*/, system.spawn((ignite.useYarn ? "yarn" : "npm run") + " format")];
            case 22:
                _b.sent();
                spinner.succeed("Linted and formatted");
                perfDuration = (new Date().getTime() - perfStart) / 10 / 100;
                spinner.succeed("ignited " + yellow(name) + " in " + perfDuration + "s");
                androidInfo = exports.isAndroidInstalled(toolbox)
                    ? ""
                    : "\n\nTo run in Android, make sure you've followed the latest react-native setup instructions at https://facebook.github.io/react-native/docs/getting-started.html before using ignite.\nYou won't be able to run " + bold("react-native run-android") + " successfully until you have.";
                successMessage = "\n    " + red("Ignite CLI") + " ignited " + yellow(name) + " in " + gray(perfDuration + "s") + "\n\n    To get started:\n\n      cd " + name + "\n      react-native run-ios\n      react-native run-android" + androidInfo + "\n      ignite --help\n\n    " + cyan("Need additional help? Join our Slack community at http://community.infinite.red.") + "\n\n    " + bold("Now get cooking! 🍽") + "\n\n    " + gray("(Running yarn install one last time to make sure everything is installed -- please be patient!)") + "\n  ";
                print.info(successMessage);
                return [2 /*return*/];
        }
    });
}); };
//# sourceMappingURL=boilerplate.js.map